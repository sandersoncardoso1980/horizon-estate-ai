// backend/diagnostic.js
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config({ path: join(__dirname, '.env') });

async function diagnostic() {
  console.log('üîç DIAGN√ìSTICO DO SUPABASE\n');
  console.log('üìÅ Diret√≥rio atual:', __dirname);
  console.log('üîß Carregando vari√°veis de ambiente...\n');

  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

  // Verifica√ß√£o 1: Vari√°veis existem?
  console.log('1. ‚úÖ Vari√°veis de ambiente:');
  console.log('   SUPABASE_URL:', supabaseUrl ? `‚úì (${supabaseUrl.length} chars)` : '‚úó FALTANDO');
  console.log('   SUPABASE_SERVICE_KEY:', supabaseKey ? `‚úì (${supabaseKey.length} chars)` : '‚úó FALTANDO');

  if (!supabaseUrl || !supabaseKey) {
    console.log('\n‚ùå ERRO: Vari√°veis de ambiente n√£o configuradas!');
    console.log('\nüí° SOLU√á√ÉO:');
    console.log('   Crie um arquivo .env na pasta backend com:');
    console.log('   SUPABASE_URL=https://seu-projeto.supabase.co');
    console.log('   SUPABASE_SERVICE_KEY=sua_chave_muito_longa_aqui');
    console.log('   PORT=5000');
    return;
  }

  // Verifica√ß√£o 2: Formato da URL
  console.log('\n2. üîó Formato da URL:');
  if (!supabaseUrl.includes('supabase.co')) {
    console.log('   ‚ùå URL n√£o parece ser do Supabase:', supabaseUrl);
  } else {
    console.log('   ‚úì URL parece v√°lida');
    console.log('   üìã URL:', supabaseUrl);
  }

  // Verifica√ß√£o 3: Formato da Key
  console.log('\n3. üîë Formato da Service Key:');
  if (!supabaseKey.startsWith('eyJ')) {
    console.log('   ‚ùå Key n√£o come√ßa com "eyJ" - formato JWT inv√°lido');
    console.log('   üîë Primeiros 20 caracteres:', supabaseKey.substring(0, 20));
  } else {
    console.log('   ‚úì Formato JWT parece v√°lido');
    console.log('   üîë Primeiros 20 caracteres:', supabaseKey.substring(0, 20) + '...');
  }

  // Verifica√ß√£o 4: Teste de conex√£o
  console.log('\n4. üöÄ Testando conex√£o...');
  try {
    const supabase = createClient(supabaseUrl, supabaseKey, {
      auth: { persistSession: false }
    });

    console.log('   ‚è≥ Fazendo requisi√ß√£o...');
    
    const { data, error } = await supabase
      .from('leads')
      .select('id, name')
      .limit(1);

    if (error) {
      console.log('   ‚ùå Erro na consulta:', error.message);
      console.log('   üìü C√≥digo do erro:', error.code);
      
      if (error.message.includes('JWT')) {
        console.log('   üí° Service Key inv√°lida ou expirada');
      } else if (error.message.includes('PGRST301')) {
        console.log('   üí° Tabela "leads" n√£o existe');
      } else if (error.message.includes('relation')) {
        console.log('   üí° Tabela n√£o encontrada no banco de dados');
      }
    } else {
      console.log('   ‚úÖ Conex√£o bem-sucedida!');
      console.log('   üìä Dados recebidos:', data);
    }

  } catch (err) {
    console.log('   ‚ùå Erro de conex√£o:', err.message);
    
    if (err.message.includes('fetch')) {
      console.log('   üí° Erro de rede/fetch. Poss√≠veis causas:');
      console.log('      - URL do Supabase incorreta');
      console.log('      - Projeto n√£o existe ou foi deletado');
      console.log('      - Service Key inv√°lida');
      console.log('      - Bloqueio de firewall/proxy');
      console.log('      - Problema de DNS');
    }
  }

  console.log('\nüìã PR√ìXIMOS PASSOS:');
  console.log('1. Verifique se o projeto existe em: https://supabase.com/dashboard');
  console.log('2. Confirme a URL exata no Settings > API');
  console.log('3. Use a SERVICE KEY (n√£o a anon key)');
  console.log('4. Verifique se o projeto n√£o est√° pausado');
  console.log('\nüîß SOLU√á√ÉO TEMPOR√ÅRIA:');
  console.log('   Use dados mock executando: node app/server.js');
}

diagnostic();